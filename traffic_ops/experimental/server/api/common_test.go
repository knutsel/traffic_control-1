// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api_test

import (
	"crypto/sha1"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/jmoiron/sqlx"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
	// "testing"

	"github.com/Comcast/traffic_control/traffic_ops/experimental/server/db"
	"github.com/Comcast/traffic_control/traffic_ops/experimental/server/routes"
)

var (
	server *httptest.Server
	reader io.Reader
	// asnsUrl string
	token string
)

type TokResp struct {
	Token string
}

func userSeed(db *sqlx.DB) {
	fmt.Println("Seeding")
	_, err := db.Exec("insert into role (id, priv_level, name) values (1, 30, 'admin')")
	if err != nil {
		fmt.Println(err.Error())
	}
	encBytes := sha1.Sum([]byte("password"))
	encString := hex.EncodeToString(encBytes[:])
	sqlStr := "insert into tm_user (username, role, local_passwd, local_user) values ('jvd',  1,'" + encString + "' , 1)"
	fmt.Println(sqlStr)
	_, err = db.Exec(sqlStr)
	if err != nil {
		fmt.Println(err.Error())
	}
}

func getToken() {
	uJson := `{"u":"jvd", "p":"password"}`
	reader = strings.NewReader(uJson)
	loginUrl := fmt.Sprintf("%s/login", server.URL)
	fmt.Println(loginUrl)
	request, err := http.NewRequest("POST", loginUrl, reader)
	res, err := http.DefaultClient.Do(request)
	if err != nil {
		fmt.Println(err.Error())
	}
	body, _ := ioutil.ReadAll(res.Body)
	var tr TokResp
	err = json.Unmarshal(body, &tr)
	fmt.Println("res:", tr.Token)
	token = "Bearer " + tr.Token
}

func init() {
	dbb, err := db.InitializeDatabase("postgres", "to_user", "twelve", "to_test", "localhost", 5432)
	if err != nil {
		fmt.Println("Error initializing database:", err)
		return
	}
	userSeed(dbb)
	server = httptest.NewServer(routes.CreateRouter(dbb))
	getToken()
	// asnsUrl = fmt.Sprintf("%s/asns", server.URL)
}
